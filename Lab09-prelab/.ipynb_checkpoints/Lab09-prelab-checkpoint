{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d295f05-aa2d-4c6a-9386-e37388c04c42",
   "metadata": {},
   "source": [
    "# Lab 09 Prelab - Exponentials and Uncertainty in Count Rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "274541f9-025e-43ac-bb5e-34fb6bf97cfc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import data_entry\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1269e27d-73b1-40f7-99ad-9bc5157e7180",
   "metadata": {},
   "source": [
    "In the upcoming lab (radiation shielding), we will be dealing with physical models that are exponential. We will find that *linearizing* exponential data will have many benefits, such as allowing us to re-use techniques previously used for fitting linear datasets. Through this pre-lab, we will walk through how to perform this linearization process and subsequent analysis through going through an example together. We will also discuss how to quantify uncertainty in radiation count-rates.\n",
    "\n",
    "Some notes before we dive into the pre-lab proper:\n",
    "- Most questions in this pre-lab ask you to explain why you can perform a certain step. The explanations do not need to be mathematically rigorous. What we want is a level of detail in your explanation so that a confused peer in the course could read it and understand the “why” part. For example, you might explain a step in an algebraic manipulation of a function as “the function looks like $y=mx+b$ and we know how to fit a graph to this function.”\n",
    "- For the first two parts of the pre-lab, we omit uncertainties from the examples for the purposes of simplifying, focusing on power law techniques. In the lab, you will be using data that includes uncertainties."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e157603e-f772-48e8-88c4-45a075c8a378",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "## Part 1 - Exponentials"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb5634ff-50dd-412e-ac26-7a67424fda66",
   "metadata": {},
   "source": [
    "The table and plot below display the population $P$ of yeast cells observed in a sample of grape juice being fermented into wine, measured over a time $t$. For simplicity, we have neglected the uncertainties in the data and rounded all times to the nearest minute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "46a9017d-ab68-43e7-8dc9-b58f21e1c71e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating undo file\n",
      "Sheet name: lab09_prelab_data1.csv\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d5bcd61b660d48b5aed1b8ecd58bbdfd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(Sheet(cells=(Cell(column_end=0, column_start=0, row_end=0, row_start=0, type='text', value='t')…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "de = data_entry.sheet(\"lab09_prelab_data1.csv\")\n",
    "# Make sure to hit \"Generate Vectors\"!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "58857cc5-bba7-4d55-bbe8-6c0523bb9dc4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(tVec, PVec, \"bo\", markersize=5)\n",
    "plt.title(\"Population of yeast cells in grape juice\")\n",
    "plt.xlabel(\"time (min)\")\n",
    "plt.ylabel(\"P\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "858fe9d1-c2ea-45a4-a6ce-0f714f0493ec",
   "metadata": {},
   "source": [
    "The data are rising with a steep upward curvature, rising extremely fast at later times $t$, so we suspect that $P$ may be rising EXPONENTIALLY with $t$. To check for an exponential dependence, $P(t) \\propto e^{+mt}$ (where $\\propto$ means \"proportional to\"), we plot a *semi-log* graph, in which the log of the population is plotted on the y-axis. In order to obtain the natural log of the population $P$, we use the `np.log` function.\n",
    "\n",
    "A small aside; you might be used to denoting the natural logarithm (base-$e$ logarithm) as $\\ln$ in high school (and with $\\log$ denoting the base-10 logarithm). However, in physics and math from here on out, the standard notation is to use $\\log$ to denote the natural logarithm (and with the base-10 logarithm being denoted as $\\log_{10}$)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "accdd9de-7188-4f16-9f3f-eacd1f8e900e",
   "metadata": {},
   "outputs": [],
   "source": [
    "logPVec = np.log(PVec)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d1ed117-4248-4ba9-8f82-a3007823d7b2",
   "metadata": {},
   "source": [
    "Plotting the semi-log graph, we then obtain:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "467c04cf-54d3-4563-89fb-176056e59ec5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(tVec, logPVec, \"bo\", markersize=5)\n",
    "plt.title(\"Population of yeast cells in grape juice, semi-log plot\")\n",
    "plt.xlabel(\"time (min)\")\n",
    "plt.ylabel(\"log(P)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21c1c82a-83ce-454b-ad7a-8f7c58f19847",
   "metadata": {},
   "source": [
    "The graph shows that there likely to be a linear relationship between $\\log(P)$ and $t$. It looks like the following general equation is a good model for the data:\n",
    "\n",
    "$$\\log(P) = mt + b$$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bfdebb8-8ee9-4bd6-8343-d8dde116bf4f",
   "metadata": {},
   "source": [
    "**Question 1.1** Explain why we can write this equation as the model for the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7032bdc9-ae11-417e-90de-696bf8e9225a",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7b8b8513-00aa-46dd-a128-08dc03b5a3e3",
   "metadata": {},
   "source": [
    "The slope $m$ of the line is $1.11 \\text{min}^{-1}$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9782f71-902a-4bc7-a74f-64b26befe090",
   "metadata": {},
   "source": [
    "**Question 1.2**  Choose some appropriate points from the graph and show how this slope (or a value close to it) is calculated."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32d79b9b-eee4-4819-9235-2b2c10db2809",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "6e8b11c2-052a-4e3c-930c-d8f690b82107",
   "metadata": {},
   "source": [
    "**Question 1.3** Explain why we assign the units of 1/minutes to the slope."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d9648f9-9683-4d8c-88b0-9382d6ffcbe6",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "38c15441-94ee-4b52-9813-d4abf8c914e1",
   "metadata": {},
   "source": [
    "The value of the intercept $b$ is approximately 1.38."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e61b9579-74a5-42a3-bcaa-9f0332846ea7",
   "metadata": {},
   "source": [
    "**Question 1.4** Explain where this value for the intercept comes from."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6091e979-6daf-4634-bb9e-90c511260ae9",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "3f1d586f-7d0d-49ee-9bd9-03d2edaca14f",
   "metadata": {},
   "source": [
    "Now, let's connect our linear expression of $\\log(P) = mt + b$, with the exponential equation which uses the fitting parameters $m$ and $b$, $P = e^b e^{mt}$. \n",
    "\n",
    "Some logarithmic and mathematical rules that may be of use are given below:\n",
    "\n",
    "- Rule 1 - Inverse properties: $\\log_a(a^x) = x$ and $a^{\\log_a(x)} = x$.\n",
    "- Rule 2 - Product: $\\log_a(xy) = \\log_a(x) + \\log_a(y)$\n",
    "- Rule 3 - Quotient: $\\log_a(x/y) = \\log_a(x) - \\log_a(y)$\n",
    "- Rule 4 - Power: $\\log_a(x^p) = p\\log_a(x)$\n",
    "- Rule 5 - Property of equalities: If you perform the same option on both sides of an equation, the sides remain equal to each other.    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4670e2e-9185-4ef2-b6fc-23cd560a1600",
   "metadata": {},
   "source": [
    "**Question 1.5** For the following steps, indicate which rule was applied."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "969e20b5-1788-4f15-b559-864509671f7b",
   "metadata": {},
   "source": [
    "*Start:* $\\log(P) = mt + b$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89a62c4a-3343-4bd2-b540-774d0c1283f2",
   "metadata": {},
   "source": [
    "*Step 1:* $e^{\\log(P)} = e^{mt + b}$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "934aaeab-0fb8-4090-89cb-35e7359839c4",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c371c64a-ad04-4b83-8872-1d58d3f2a94f",
   "metadata": {},
   "source": [
    "*Step 2:* $P = e^{mt + b}$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7913a6e-9613-4c47-a90f-965136cd7f0a",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "19a8798f-3c9c-4b26-a420-d9220d35ff28",
   "metadata": {},
   "source": [
    "*Step 3:* $P = e^b e^{mt}$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d3cb36d-b2fb-477c-808a-ed10d86480ef",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "430c9579-e891-47dc-af44-9a6b11f3443d",
   "metadata": {},
   "source": [
    "If we substitute in the values for $m$ and $b$, the model becomes:\n",
    "\n",
    "$$P = 4.0e^{1.11 t}.$$\n",
    "\n",
    "This is called exponential behavior (which is of the form $e^{t}$ and differs from power law (which would be of the form $t^\\alpha$)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa81f4e0-71a1-4fa0-8675-d7c3707f80ad",
   "metadata": {},
   "source": [
    "**Question 1.6** Explain how the coefficient 4.0 in front of the exponential was determined."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d911ef8a-0dc6-4f77-8f55-dfaff8d923a5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a800092d-339c-4fe3-9216-9d62d7531489",
   "metadata": {},
   "source": [
    "### Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4868abf-0e2a-44af-8893-d06dcd754d0a",
   "metadata": {},
   "source": [
    "To summarize, data that follow a straight line on a *semi-log* plot (logarithmic y-axis, linear x-axis) indicate that an exponential is the correct model, and the value of the slope gives the coefficient in the argument of the exponent. \n",
    "\n",
    "A customary way to write such exponentials is:\n",
    "\n",
    "$$P(t) = P(0)e^{t/\\tau}$$\n",
    "\n",
    "so that the parameter $\\tau$ has the same units as the variable $t$. In this example, the units are minutes and $\\tau$ is referred to as a time constant (like we saw in the RC lab). For this particular set of data,\n",
    "\n",
    "$$\\tau = 0.9\\text{ minutes}.$$\n",
    "\n",
    "\n",
    "In python, we can obtain the logarithm of a vector by using the `np.log` function on the original vector. In conclusion, we remark on the power of linearization; it allows us to see if a dataset has exponential behavior, and allows us to determine the coefficient in the exponent via determining the slope of the linearized dataset (something we know how to do); figuring out the coefficient just by looking at the original data is less obvious."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7951ce45-e2e4-4927-b9ca-6986f956997e",
   "metadata": {},
   "source": [
    "**Question 1.7** Explain the relationship between the time constant and the slope of the line in the semi-log plot."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a945ec8-8131-49e9-94d3-44b39a8335c6",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "6632ca76-8c22-48c8-8c3a-4f836a3edc31",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "## Part 2 - Uncertainties in radiation count-rates"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe158772-88cf-4811-9d0c-be336b22733a",
   "metadata": {},
   "source": [
    "In this lab we will be using a Geiger counter to detect radiation from a radioactive source. Specifically, we will be using a Strontium 90 source, which emits electrons when it decays. The Geiger counter detects ionizing radiation, including the electrons (known as beta particles) from the Strontium 90 decay. Each particle of ionization radiation that interacts with the Geiger counter will produce a “count”. There are many factors that influence how many counts will be recorded by the Geiger counter, including how long you count for, how active the source is, how far apart the source and counter are, and how much shielding is in between source and counter.\n",
    "\n",
    "The count-rate, $R$, is the quantity that represents the rate at which the counts are being measured,\n",
    "\n",
    "$$R = N/t$$\n",
    "\n",
    "where $t$ is the amount of time for which you counted and $N$ the number of counts observed.\n",
    "\n",
    "Radioactive decay is a random process, so like with the pendulum timing measurements, there will be variability when you run multiple trials. The randomness in this case is well-described by counting statistics (specifically by the Poisson distribution). These counting statistics tell us that the uncertainty in the number of counts N is given by:\n",
    "\n",
    "$$u[N] = \\sqrt{N}.$$\n",
    "\n",
    "This means that if you make repeated measurements of $N$ over the same time interval $T$, but keep the other variables the same, that these measurements will follow a Gaussian distribution and have a standard deviation of $\\sqrt{N}$. \n",
    "\n",
    "Now, let's turn our attention to calculating the uncertainty in the count-rate $R$. We can write the relative uncertainty for $R$ as:\n",
    "\n",
    "$$\\frac{u[R]}{R} = \\sqrt{\\left(\\frac{u[N]}{N}\\right)^2 + \\left(\\frac{u[t]}{t}\\right)^2}. \\quad (1)$$\n",
    "\n",
    "Revisit the uncertainty propagation document."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f751de8-2af9-4f41-83b1-9df794c8d512",
   "metadata": {},
   "source": [
    "**Question 2.1** Which expression for uncertainty propagation was used here?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b306e41d-c2f0-4e9f-9e26-9100b4261d06",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "5aeb1cad-5b16-4f1f-a602-e530bb6e1bfa",
   "metadata": {},
   "source": [
    "Using our expression for $u[N]$ from the last question ($u[N]/N = \\sqrt{N}/N = 1/\\sqrt{N}$), we can rewrite the expression above as:\n",
    "\n",
    "$$\\frac{u[R]}{R} = \\sqrt{\\left(\\frac{1}{\\sqrt{N}}\\right)^2 + \\left(\\frac{u[t]}{t}\\right)^2}. \\quad (2)$$\n",
    "$$\\frac{u[R]}{R} = \\sqrt{\\frac{1}{N} + \\left(\\frac{u[t]}{t}\\right)^2}. \\quad (3)$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a76535f0-057c-4862-8f4c-c08c8ef4f639",
   "metadata": {},
   "source": [
    "**Question 2.2** Show how you get from equation (1) to equation (3)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "481c83ae-b283-4bfe-b757-84c86131bff3",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e690a8a0-4a7c-41e2-9c3d-a3c34d4382d4",
   "metadata": {},
   "source": [
    "In a later part of the prelab we will look at the uncertainty in time, but for now let us focus our attention only on the uncertainty due to the counting statistics. To do this we will use a simplified version of Equation 3, without the uncertainty in time,\n",
    "\n",
    "$$\\frac{u[R]}{R} = \\frac{1}{\\sqrt{N}}. \\quad (4)$$\n",
    "\n",
    "Let's use this to look at how counting for a longer period of time will affect the uncertainty in our count rate.\n",
    "\n",
    "*Example 1:* You perform a counting experiment and measure $N = 400$ counts during a 49.98s time interval. We will investigate how to determine the timing uncertainty during the lab."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "075716e2-ae49-406d-b96c-c3f2ec8dcaaf",
   "metadata": {},
   "source": [
    "**Question 2.3** Calculate the relative uncertainties for this measurement: $u[N]/N$, and $u[R]/R$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0547769-f4e3-4bd8-bab4-59c813ded7ad",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "64a209c7-44f9-43d0-bd7b-2782f54eea1b",
   "metadata": {},
   "source": [
    "**Question 2.4** Show that $R = 8.00 \\pm 0.40$ counts/2 (after we apply our regular 2 sig figs for calculated uncertainties rule)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35a82aba-a93d-4785-b141-89dc34aea809",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "fb7c335f-aa48-4c20-89df-6555e4004fd8",
   "metadata": {},
   "source": [
    "*Example 2:* You decide that you can reduce the uncertainty in your count-rate by counting for longer and decide to count for 4 times as long. You measure $N = 1602$ counts in a 200.16s time interval. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d278111-0ecb-4622-9480-53b8539fcf90",
   "metadata": {},
   "source": [
    "**Question 2.5** Again, calculate the relative uncertainties for this measurement: $u[N]/N$, and $u[R]/R$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5d4bd69-8624-43f6-9ea6-ca23541bff62",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "edea6801-918b-406d-8be6-a24e0ebbf9cf",
   "metadata": {},
   "source": [
    "**Question 2.6** Show that $R = 8.00 \\pm 0.20$ counts/2 (after we apply our regular 2 sig figs for calculated uncertainties rule)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17d05279-a6ba-4366-b798-0fb143076f22",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8f8ec972-c737-40a0-84cf-c795bb10c351",
   "metadata": {},
   "source": [
    "Counting for approximately 4 times as long reduced $u[R]/R$ by a factor of 2. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30bd8ea0-8672-49f2-b056-fa68979d1045",
   "metadata": {},
   "source": [
    "**Question 2.7** Use the relative uncertainty $u[N]/N$ to explain how this happened."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06a1955b-fb88-4292-b88b-10ad75bdf76d",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "15b6ad5f-6503-4fd6-9543-38f3edbda596",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "## Part 3 - Setting up analysis code for the lab (Manual fit)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b18d531c-146d-4e0a-86ee-7c30679b9cee",
   "metadata": {},
   "source": [
    "In the lab, we will be analyzing the radiation count-rate $R$ as a function of the thickness of shielding $x$. Below, we have a mock dataset for which we will demonstrate the process of linearization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3947a1cd-2daf-4e5f-8d4a-66bdb5aa8a46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sheet name: lab09_prelab_data2.csv\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c0e721421d4a4dcd9f4acbb7607d85ae",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(Sheet(cells=(Cell(column_end=0, column_start=0, row_end=0, row_start=0, type='text', value='x')…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "de2 = data_entry.sheet(\"lab09_prelab_data2.csv\")\n",
    "#(5*np.exp(-xVec/0.1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae1978d4-a4b2-4715-ac48-1bea6b74b80d",
   "metadata": {},
   "source": [
    "The uncertainty $u[N]$ can be calculated by taking the square root of the $N$-vector:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "edd7080c-32f2-435b-9875-19ed5bb30ffd",
   "metadata": {},
   "outputs": [],
   "source": [
    "uNVec = np.sqrt(NVec)  # Or (NVec)**(0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3098c71e-acb9-4412-b4a4-a641fe062d98",
   "metadata": {},
   "source": [
    "Next, we want to calculate the count rate from the data. We recall that $R = N/t$, so we can calculate the count rate vector as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3c0b9bf2-f01e-4c65-aca4-1091c0575aab",
   "metadata": {},
   "outputs": [],
   "source": [
    "RateVec = NVec/tVec"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08256c53-59b1-47c3-ac9e-5efd079604f4",
   "metadata": {},
   "source": [
    "Next, rearranging equation (3) from the earlier part in the pre-lab, we can obtain the uncertainty in the count rates:\n",
    "\n",
    "$$u[R] = R\\sqrt{\\frac{1}{N} + \\left(\\frac{u[t]}{t}\\right)^2}.$$\n",
    "\n",
    "So in python, this becomes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "124cf866-5e2c-42e7-8282-0aef153974e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "uRateVec = RateVec * np.sqrt(1/NVec + (utVec/tVec)**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5054e64a-1295-43cf-a6c2-253a4698e274",
   "metadata": {},
   "source": [
    "Our model for the count-rate will take the form:\n",
    "\n",
    "$$R(x) = R_0\\exp(-\\mu x)$$\n",
    "\n",
    "where $R_0 = R(0)$ is the no-shielding count-rate, and $\\mu$ is the attenuation parameter. In order to proceed with fitting for the count-rate, we will want to linearize the data; in order to do so, we take the natural logarithm of the count-rate. Doing so, we obtain:\n",
    "\n",
    "$$\\log(R(x)) = \\log(R_0\\exp(-\\mu x)) = \\log(R_0) + \\log(\\exp(-\\mu x)) = \\log(R_0) - \\mu x = b+ mx$$\n",
    "\n",
    "where in the last equality we have $m = -\\mu$ as the slope of the linearized model and $\\log(R_0) = b$ as the intercept.\n",
    "\n",
    "To fit this model, we will want to take the natural logarithm of the count rate data. Doing so in python, we have:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b191903b-f41a-46d6-8e50-2f0a92a5fef2",
   "metadata": {},
   "outputs": [],
   "source": [
    "logRateVec = np.log(RateVec)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b340801-65f0-4115-b8e6-1477fc43052b",
   "metadata": {},
   "source": [
    "We will also want to obtain the uncertainty in the logarithm of the rate; we can derive this using the derivative rule for uncertainties:\n",
    "\n",
    "$$u[f(x)] = u[x]\\lvert\\frac{\\mathrm{d}f}{\\mathrm{d}x}\\rvert$$\n",
    "\n",
    "In our case, we have that the function $f(x)$ takes the form of $log(R)$, so the uncertainty is:\n",
    "\n",
    "$$u[\\log(R)] = u[R]\\lvert\\frac{\\mathrm{d}\\log(R)}{\\mathrm{d}R}\\rvert = u[R]\\frac{1}{R} = \\frac{u[R]}{R}$$\n",
    "\n",
    "where we have used that the derivative of the natural logarithm $\\log(R)$ is $\\frac{1}{R}$. We have therefore found the uncertainty in the logarithm of the rate to be $u[R]/R$; let's also calculate this in python!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "36908b6c-14d2-4676-b3d4-ddd73a99d0c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "ulogRateVec = uRateVec/RateVec"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a61e4447-f307-4afb-9b1f-9076d8f206cd",
   "metadata": {},
   "source": [
    "Now, we have a linearized dataset to which we may fit a linear model (with an intercept). This is something that we have done many times before (in labs 5-8). We can reuse all of the code we had for plotting the (linearized data) scatterplot, plotting the linear model, calculating and plotting the residuals, and calculating the $\\chi_w^2$ metric for calculating the goodness of fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "a7766424-f802-4263-bb0b-40fa6364e530",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "232.61263150621016\n"
     ]
    }
   ],
   "source": [
    "# DATA/MODEL PLOT\n",
    "# Step 1: find the limits of the data:\n",
    "xmin = np.min(xVec) # use the np.min function to find the smallest x value\n",
    "xmax = np.max(xVec) # same for max\n",
    "#print (xmin, xmax)  # uncomment to see what the limits are\n",
    "\n",
    "# Step 2: generate a bunch of x points between xmin and xmax\n",
    "xpoints = np.linspace(xmin, xmax, 200) # gives 200 evenly spaced points between xmin and xmax\n",
    "#print(xpoints) # uncomment to see the x values that were generated.\n",
    "\n",
    "# Step 3: calculate the model values (for linear model with intercept):\n",
    "##### MODIFY THE MODEL PARAMETERS HERE ##############################\n",
    "slope = -5  # Estimate of the slope m\n",
    "intercept = 3  # Estimate of the intercept b\n",
    "#####################################################################\n",
    "ypoints = xpoints * slope + intercept # this calculates the yvalues at all 200 points\n",
    "\n",
    "# Step 4: plot the curve. We plot this as a red line \"r-\" :\n",
    "plt.plot(xpoints, ypoints, \"r-\", label = \"log(R) = -mu x + log(R_0)\")\n",
    "\n",
    "# What's below is exactly what we had earlier:\n",
    "plt.errorbar(xVec, logRateVec, ulogRateVec, fmt=\"bo\", markersize=3, label=\"Log of Experimental data\")\n",
    "plt.title(\"Semi-log plot for Count rate vs. thickness of shielding\")\n",
    "plt.xlabel(\"Thickness (mm)\")\n",
    "plt.ylabel(\"Log(Count-rate)\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# RESIDUALS PLOT\n",
    "# Step 1: Calculate the model at each x-datapoint\n",
    "ymodel = xVec * slope + intercept\n",
    "\n",
    "# Step 2: Calculate the residual vector\n",
    "RVec = logRateVec - ymodel\n",
    "\n",
    "# Step 3: Plot the residual vector against the x-data vector\n",
    "plt.errorbar(xVec, RVec, ulogRateVec, fmt=\"bo\", markersize = 3)\n",
    "\n",
    "# Step 4: Add a R = 0 x-axis (horizontal line) to the plot\n",
    "plt.hlines(y=0, xmin=xmin, xmax=xmax, color='k') # draw axis at y = 0.\n",
    "\n",
    "# Add axis labels and title, and show the graph\n",
    "plt.title(\"Residuals for Linear fit of semi-log count rate data\")\n",
    "plt.xlabel(\"Thickness (mm)\")\n",
    "plt.ylabel(\"Residual = data - model\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# CHI-SQUARED CALCULATION\n",
    "N = len(xVec)\n",
    "P = 2  # 2 parameters; slope and intercept\n",
    "weightedsquaredresVec = (RVec/ulogRateVec)**2\n",
    "chisquared = np.sum(weightedsquaredresVec)/(N-P)\n",
    "print(chisquared)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe645fed-7c69-47dd-bcc4-d2f46a3862df",
   "metadata": {},
   "source": [
    "A couple notes:\n",
    "- We do all of the fitting on the linearized dataset; so for plotting, the residuals calculation, and the $\\chi_w^2$ calculation, we use the logarithm of the experimental count data throughout.\n",
    "- The count-rate decreases the more shielding we have; so the exponential coefficient, and hence the slope of the semi-log plot will be both negative."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3f07821-53b8-4cb8-ad1b-baac34697bc4",
   "metadata": {},
   "source": [
    "**Question 3.1** The semi-log plot looks linear, which tells us that the data indeed possesses exponential behavior. However, the linear model we fit to the semi-log scatterplot looks like a pretty bad fit at the moment. Improve the model by minimizing $\\chi_w^2$ and using the residual plot (by modifying the `slope` and `intercept` parameters). Report the best-fit slope and intercept parameters, as well as the $\\chi_w^2$ value you end up with.\n",
    "\n",
    "If you opt for the iterative manual determination of $m$ and $b$ during the lab, you can adjust the slope/intercept from the best-fit values to obtain the max/min slopes $m_{\\text{max}}/m_{\\text{min}}$ and min/max intercepts $b_{\\text{min}}/b_{\\text{max}}$ that fit the data reasonably, and from these parameters calculate the uncertainties in the best fit slope and intercept; however, we do not require this here. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a4e10f9-b3bc-4b92-8d67-3bda679c7864",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "4f1d8290-e6fb-4380-a1b1-ae7b8649c0b7",
   "metadata": {},
   "source": [
    "**Question 3.2** From your best-fit `slope` and `intercept` values, extract the parameters $R_0$ (the zero-shielding count-rate) and $\\mu$ (the attenuation coefficient). Recall that $b = \\log(R_0)$ and $m = -\\mu$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ebc2a5c-8961-4542-bb0c-e81645a8f822",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "061340e8-4d85-464a-a126-c93e7ba8caa3",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "source": [
    "## Part 4 (Optional) - Setting up analysis code for the lab (Analytic best fit)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "531efa78-39a6-4b6b-b5fd-26fd0094f719",
   "metadata": {},
   "source": [
    "In the RC circuit lab, we used an *analytic* expression for the best-fit slope that minimized $\\chi_w^2$. In that scenario, we had a slightly simpler model of $y = mx$; without any intercept parameter. However, it turns out that there exists analogous expressions for the best-fit slope and intercept for the case where we have a linear model with an intercept. The derivations of these quantities are more complicated than in the zero-intercept case, so here we will just quote the result. We consider a dataset $\\{(x_i, y_i \\pm u[y_i])\\}_{i=1}^N$. We first define some intermediate parameters:\n",
    "\n",
    "$$A = \\sum_{i=1}^N \\frac{1}{u[y_i]}$$\n",
    "\n",
    "$$B = \\sum_{i=1}^N \\frac{x_iy_i}{u[y_i]}$$\n",
    "\n",
    "$$C = \\sum_{i=1}^N \\frac{x_i}{u[y_i]}$$\n",
    "\n",
    "$$D = \\sum_{i=1}^N \\frac{y_i}{u[y_i]}$$\n",
    "\n",
    "$$E = \\sum_{i=1}^N \\frac{x_i^2}{u[y_i]}$$\n",
    "\n",
    "$$Z = A*E - C^2$$\n",
    "\n",
    "Having defined these sums, we can then quote the best-fit parameters and their uncertainties as:\n",
    "\n",
    "\n",
    "$$m = \\frac{A*B - C * D}{Z}$$\n",
    "\n",
    "$$u[m] = \\sqrt{\\frac{A}{Z}}$$\n",
    "\n",
    "$$b = \\frac{D*E - B*C}{Z}$$\n",
    "\n",
    "$$u[b] = \\sqrt{\\frac{E}{Z}}$$\n",
    "\n",
    "These expressions are not pretty, and it is not important for our purposes to understand why they take the form that they do. However, we are still able to use them to determine the best fit slope and intercept of our radiation-count dataset.\n",
    "\n",
    "Below, we have python code that calculates the best-fit slope/intercept $m$ and $b$, along with their uncertainties, for a dataset `xVec, yVec, uyVec` (running the code will just throw an error, as we have not defined these quantities)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7188d962-7bd6-47e6-81df-210175ccd9cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "A = np.sum(1/uyVec)\n",
    "B = np.sum(xVec*yVec/uyVec)\n",
    "C = np.sum(xVec/uyVec)\n",
    "D = np.sum(yVec/uyVec)\n",
    "E = np.sum(xVec**2/uyVec)\n",
    "Z = A * E - C**2\n",
    "\n",
    "m = (A*B-C*D)/Z\n",
    "um = np.sqrt(A/Z)\n",
    "b = (D*E-B*C)/Z\n",
    "ub = np.sqrt(E/Z)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c790226c-552a-4f04-b1e4-4ddc378a7e3e",
   "metadata": {},
   "source": [
    "**Question 4.1** Below, we have a copy of the above cell for calculating the best fit $m$ and $b$ and their uncertainties. Change `yVec` to `logRateVec` and `uyVec` to `ulogRateVec` so the code will calculate the best fit slope and intercept for the semi-log count-rate dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "60c08188-3ba3-44b9-947d-23c79dca087f",
   "metadata": {},
   "outputs": [],
   "source": [
    "A = np.sum(1/uyVec)\n",
    "B = np.sum(xVec*yVec/uyVec)\n",
    "C = np.sum(xVec/uyVec)\n",
    "D = np.sum(yVec/uyVec)\n",
    "E = np.sum(xVec**2/uyVec)\n",
    "Z = A * E - C**2\n",
    "\n",
    "m = (A*B-C*D)/Z\n",
    "um = np.sqrt(A/Z)\n",
    "b = (D*E-B*C)/Z\n",
    "ub = np.sqrt(E/Z)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8846237-7a19-4702-b3c3-24b176a55eba",
   "metadata": {},
   "source": [
    "**Question 4.2** Print out the best fit slope and intercept. Then, substitute their values into the plotting + $\\chi_w^2$ code, below. What do you notice about the residuals? What is the minimized $\\chi_w^2$?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88893c7e-0038-4ca5-9d4c-685a7785abd9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72b82e8f-1035-4e12-aabd-b6e297a8d735",
   "metadata": {},
   "outputs": [],
   "source": [
    "# DATA/MODEL PLOT\n",
    "# Step 1: find the limits of the data:\n",
    "xmin = np.min(xVec) # use the np.min function to find the smallest x value\n",
    "xmax = np.max(xVec) # same for max\n",
    "#print (xmin, xmax)  # uncomment to see what the limits are\n",
    "\n",
    "# Step 2: generate a bunch of x points between xmin and xmax\n",
    "xpoints = np.linspace(xmin, xmax, 200) # gives 200 evenly spaced points between xmin and xmax\n",
    "#print(xpoints) # uncomment to see the x values that were generated.\n",
    "\n",
    "# Step 3: calculate the model values (for linear model with intercept):\n",
    "##### MODIFY THE MODEL PARAMETERS HERE ##############################\n",
    "slope = ??  # Replace ?? with the best fit slope\n",
    "intercept = ??  # Replace ?? with the best fit intercept\n",
    "#####################################################################\n",
    "ypoints = xpoints * slope + intercept # this calculates the yvalues at all 200 points\n",
    "\n",
    "# Step 4: plot the curve. We plot this as a red line \"r-\" :\n",
    "plt.plot(xpoints, ypoints, \"r-\", label = \"log(R) = -mu x + log(R_0)\")\n",
    "\n",
    "# What's below is exactly what we had earlier:\n",
    "plt.errorbar(xVec, logRateVec, ulogRateVec, fmt=\"bo\", markersize=3, label=\"Log of Experimental data\")\n",
    "plt.title(\"Semi-log plot for Count rate vs. thickness of shielding\")\n",
    "plt.xlabel(\"Thickness (mm)\")\n",
    "plt.ylabel(\"Log(Count-rate)\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# RESIDUALS PLOT\n",
    "# Step 1: Calculate the model at each x-datapoint\n",
    "ymodel = xVec * slope + intercept\n",
    "\n",
    "# Step 2: Calculate the residual vector\n",
    "RVec = logRateVec - ymodel\n",
    "\n",
    "# Step 3: Plot the residual vector against the x-data vector\n",
    "plt.errorbar(xVec, RVec, ulogRateVec, fmt=\"bo\", markersize = 3)\n",
    "\n",
    "# Step 4: Add a R = 0 x-axis (horizontal line) to the plot\n",
    "plt.hlines(y=0, xmin=xmin, xmax=xmax, color='k') # draw axis at y = 0.\n",
    "\n",
    "# Add axis labels and title, and show the graph\n",
    "plt.title(\"Residuals for Linear fit of semi-log count rate data\")\n",
    "plt.xlabel(\"Thickness (mm)\")\n",
    "plt.ylabel(\"Residual = data - model\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# CHI-SQUARED CALCULATION\n",
    "N = len(xVec)\n",
    "P = 2  # 2 parameters; slope and intercept\n",
    "weightedsquaredresVec = (RVec/ulogRateVec)**2\n",
    "chisquared = np.sum(weightedsquaredresVec)/(N-P)\n",
    "print(chisquared)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ec22987-ceb7-4f85-bc63-fd6db99e2cf4",
   "metadata": {},
   "source": [
    "**Question 4.3** From the best-fit $m$ and $b$ values, extract the parameters $R_0$ (the zero-shielding count-rate) and $\\mu$ (the attenuation coefficient). Recall that $b = \\log(R_0)$ and $m = -\\mu$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3831039-742d-4833-8d35-fec522b5ff7c",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a23560a4-e711-473f-b1ce-eb48105d0151",
   "metadata": {},
   "source": [
    "**Question 4.4** From the uncertainties in $m$ and $b$, extract the uncertainties in $R_0$ and the attenuation coefficient $\\mu$.\n",
    "\n",
    "Hint: By the derivative rule, we have that:\n",
    "\n",
    "$$R_0 = \\exp(b) \\implies u[R_0] = u[b]\\exp(b)$$\n",
    "\n",
    "$$m = -\\mu \\implies u[m] = u[\\mu].$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26f8f3d2-7120-4acc-a413-d41abdeb47ab",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
